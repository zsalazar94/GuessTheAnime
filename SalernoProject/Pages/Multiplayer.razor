@page "/Multiplayer"
@using Microsoft.AspNetCore.SignalR.Client
@using SalernoProject.Data
@using System.IO;
@inject IConfiguration Config
@inject IJSRuntime js
@inject BlobService BlobService
@inject NavigationManager Navigation
@implements IAsyncDisposable
<PageTitle>Anime Openings Tester</PageTitle>

<head>
    <link href="css/Multiplayer.css?version=0.1" rel="stylesheet">
</head>


@if (!inRoom)
{
    <!-- Room Section -->
    <section class="room-section">
        <h3>Enter a room name to join or create a new room!</h3>

        <!-- User Display Name -->
        <div class="form-group">
            <label for="displayName">Display Name</label>
            <input type="text" id="displayName" @bind="userName" class="input-field" />
        </div>

        <!-- Join Room Section -->
        <div class="join-room">
            <h4>Join an Existing Room</h4>
            <div class="form-group">
                <label for="roomCode">Room Code</label>
                <input type="text" id="roomCode" @bind="roomName" class="input-field" />
                <button @onclick="JoinRoom" class="action-button">Join Room</button>
            </div>
        </div>

        <!-- Create Room Section -->
        <div class="create-room">
            <h4>Create a New Room</h4>
            <button @onclick="CreateRoom" class="action-button">Create Room</button>
        </div>
    </section>
}
else
{
    <!-- Main Container -->
    <div class="main-container">
        <!-- Content Container -->
        <div class="content-container">
            <h1>Welcome to Anime Openings Quiz!</h1>
            <!-- Host Controls -->
            @if (host)
            {
                <button @onclick="ChangeFilterAnime" class="action-button">Change Filter</button>
            }
            <!-- Room Name Toggle -->
            <button @onclick="HideRoomName" class="action-button">@roomNameButtonText</button>
            <h3 hidden="@hiddenName">Your Room Name: @roomName</h3>

            <!-- Host Audio Controls -->
            <div class="audio-controls">

                @if (host)
                {
                    <button @onclick="() => PlayAudio(10000)" class="time-button">10 Seconds</button>
                    <button @onclick="() => PlayAudio(20000)" class="time-button">20 Seconds</button>
                    <button @onclick="() => PlayAudio(30000)" class="time-button">30 Seconds</button>
                    <button @onclick="ConfirmPlayVideo" class="reveal-button" hidden="@revealConfirm">Reveal Answer</button>
                    <button @onclick="PlayVideo" class="agree-confirmation-button" hidden="@(!revealConfirm)">Yes, Reveal Answer</button>
                    <button @onclick="ConfirmPlayVideo" class="deny-confirmation-button" hidden="@(!revealConfirm)">No, Wait</button>

                }
                <button @onclick="SubmitGuess" class="submit-button" hidden="@hasGuessed">Submit Guess</button>
            </div>


            <!-- Anime Guess Selector -->
            <label for="animeGuess" hidden="@hasGuessed">Your Anime Guess  </label>
            <select id="animeGuess" @bind="animeGuess" hidden="@hasGuessed" class="input-field">
                <option value=""></option>
                @foreach (string anime in selectedAnimes)
                {
                    <option value="@anime">@anime</option>
                }
            </select>

            <!-- Anime Filter for Host -->
            @if (host)
            {
                <div hidden="@selectedFilter" class="filter-section">
                    <h3>Select Anime to Include</h3>
                    @foreach (string anime in allAnimeList)
                    {
                        <div class="checkbox-container">
                            <input type="checkbox" id="@anime" @bind="@checkedAnimes[anime]" />
                            <label for="@anime">@anime</label>
                        </div>
                    }
                    <div class="button-container">
                        <button @onclick="FilterAnime" class="filter-button">Submit</button>
                    </div>
                </div>
            }

            <!-- Video and Anime Info -->
            <div class="media-chat-container">

                <div class="video-section @(hiddenLabel ? "is-hidden" : "")"> <!-- this ternary operator changes the class depending on if its hidden or not -->
                    <h2>@animeName - @openingNumber - @openingName</h2>
                    <video id="video" class="video">
                        <source id="videoSource" src="@videoURI" />
                    </video>
                </div>

                <!-- Chat room Container -->
                <div class="chat-section">
                    <h2>Chat</h2>
                    <ul id="messagesList">
                        @foreach (ChatMessage message in messages)
                        {
                            <li>
                                <pre><span style="color: @message.userColor;">@message.username</span> : @message.message</pre>
                            </li>
                        }
                    </ul>
                    <!-- Input and Controls Container -->
                    <div class="input-controls-container">
                        <!-- Textarea for New Messages -->
                        <textarea class="chat-input" placeholder="Type a message..." 
                        @bind-value=newMessage @bind-value:event="oninput" 
                        @onkeydown=HandleEnterKeyPress></textarea>
                        <!-- Color Picker and Send Button Container -->
                        <div class="controls-container">
                            <input type="color" @bind="userColor" class="color-picker" />
                            <button class="send-button" @onclick=sendChatMessage>Send</button>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <!-- Scoreboard Container -->
        <div class="scoreboard-container">
            <h3>Scoreboard</h3>
            <ul class="score-list">
                @foreach (var item in scoreDict)
                {
                    <li>
                        @item.Key: @item.Value
                        @if (usersWhoHaveGuessed.Contains(item.Key))
                        {
                            <span class="check-mark">&#x2714;</span> <!-- Unicode check mark -->
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
}


@code 
{
    public string animeGuess = ""; // what the user has guessed is the answer
    public bool hasGuessed = false; // decides whether to hide submit guess button.
    public bool hiddenName = true, selectedFilter = false, revealConfirm = false; // booleans for whether or not to show certain elements
    public string roomName = "", userName = ""; // names of the room we are in and what we chose as our username
    public string userColor = "";
    private string animeName = "", openingNumber = "", openingName = "", videoURI = "", defaultConnection = "", sasToken = "", roomNameButtonText = "Show Room Name";
    private int videoIndex = 0;

    private Random rnd = new Random();

    private List<ChatMessage> messages = new List<ChatMessage>(); // List of messages that have been sent in the chat feature.
    private string newMessage = "";
    private List<VideoFile> videoFilesAll = new List<VideoFile>(); // list of all video files
    private List<VideoFile> videoFiles = new List<VideoFile>(); // list of video files we can select based on filters
    private VideoFile? currentVideo; // what video is currently being shown


    List<string> allAnimeList = new List<string>(); // list of all anime
    Dictionary<string, bool> checkedAnimes = new Dictionary<string, bool>(); // dictionary to say if to include anime or not
    List<string> selectedAnimes = new List<string>();  // list of anime that are true in the checkedAnimes dictionary

    Dictionary<string, int> scoreDict = new Dictionary<string, int>(); // scoreboard values for each player
    List<string> usersWhoHaveGuessed = new List<string>(); // these are the users who have submitted a guess for the current opening

    private BlobService? blobServer;
    bool hiddenLabel = true; // hide or show video


    public bool host = false, inRoom = false;
    private HubConnection? hubConnection;


    protected override async Task OnInitializedAsync()
    {
        await StartHub();
        blobServer = new BlobService(Config);
        sasToken = blobServer.GenerateSasTokenForContainer();
        await ReadFile();

        allAnimeList = videoFiles.Select(x => x.animeName).Distinct().ToList();
        foreach (var anime in allAnimeList)
        {
            checkedAnimes[anime] = false;
        }
        selectedAnimes = allAnimeList;
    }

    private async Task SubmitGuess()
    {
        hasGuessed = true;
        await hubConnection.SendAsync("SendGuess", roomName, userName);

    }

    private async Task HandleEnterKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await sendChatMessage();
        }
    }

    private async Task sendChatMessage()
    {
        ChatMessage myMessage;
        if (userColor == "")
        {
            myMessage = new ChatMessage(newMessage, userName);
        }
        else
        {
            myMessage = new ChatMessage(newMessage, userName, userColor);
        }
        newMessage = string.Empty; // clear chat box
        await hubConnection.SendAsync("SendMessage", roomName, myMessage);
    }

    private async Task ChangeFilterAnime() // toggles visibility of anime filters.
    {
        selectedFilter = !selectedFilter;
        if (selectedFilter) // if we are hiding the filters
        {
            await FilterAnime(); // set the filter
        }
    }

    private async Task FilterAnime()
    {
        if (checkedAnimes.Where(kv => kv.Value).Select(kv => kv.Key).Count() > 0)
        {
            selectedAnimes = checkedAnimes.Where(kv => kv.Value).Select(kv => kv.Key).ToList();
            await hubConnection.SendAsync("SetFilter", roomName, selectedAnimes);

            if (!selectedAnimes.Contains(currentVideo.animeName))
            {                
                await NewOpening();
            }

        }
    }

    private async Task StartHub()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/animehub"))
        .Build();

        //these are the methods to be called when AnimeHub needs to make a method call.
        hubConnection.On("RoomCreated", async() =>
        {
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("PlayerJoined", async(joiningUserName) =>
        {
            if (host)
            {                
                await FilterAnime(); // send filters to everyone since new player joined
            }
            await PlayerJoinedSendOpening();
            scoreDict.Add(joiningUserName, 0);
            if (host)
            {
                await hubConnection.SendAsync("SendScoreboard", roomName, scoreDict);
            }
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("IncreaseScore", async (usernameToIncrease) =>
        {
            scoreDict[usernameToIncrease] += 1;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<Dictionary<string,int>>("ScoreboardSend", async (scores) =>
        {
            scoreDict = scores;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On("RoomNotFound", () =>
        {
            inRoom = false;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("PlayerLeft", () =>
        {
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("RecieveVideo", async(videoIndexReturn) =>
        {
            await js.InvokeVoidAsync("pauseVideo", "video");
            animeName = "";
            openingNumber = "";
            openingName = "";
            currentVideo = videoFiles[videoIndexReturn];
            videoURI = blobServer.GetBlobSasUri(currentVideo.filePath, sasToken);
            hiddenLabel = true;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("PlayAudio", async (seconds) =>
        {
            await js.InvokeVoidAsync("hideVideoAndPlay", "video", seconds);

        });

        hubConnection.On("PlayVideo", async () =>
        {
            usersWhoHaveGuessed.Clear(); // empty the list of who has guessed for next video
            animeName = currentVideo.animeName;
            openingNumber = currentVideo.openingNumber;
            openingName = currentVideo.openingName;
            hiddenLabel = false;
            hasGuessed = false;
            if (animeGuess == animeName) // if we got the answer correct
            {
                await hubConnection.SendAsync("SendCorrectNames", roomName, userName);
            }
            await js.InvokeVoidAsync("showVideoAndPlay", "video", DotNetObjectReference.Create(this));
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<string>>("RecieveFilter", (selectAnime) =>
        {
            selectedAnimes = selectAnime;

            selectedFilter = true;
            videoFiles = videoFilesAll.Where(x => selectedAnimes.Contains(x.animeName)).ToList();
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<ChatMessage>("RecieveMessage", async (incomingMessage) =>
        {
            messages.Add(incomingMessage);
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RecieveGuess", async (incomingUser) =>
        {
            usersWhoHaveGuessed.Add(incomingUser);
            if (host)
            {
                if (usersWhoHaveGuessed.Count() == scoreDict.Count()) // if everyone has submitted
                {
                    usersWhoHaveGuessed.Clear(); // empty the list for the new guess
                    await PlayVideo();
                }
            }
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }


    private async Task CreateRoom()
    {
        if (hubConnection is not null && userName != "")
        {

            host = true;
            inRoom = true;
            Guid guid = Guid.NewGuid();
            scoreDict.Add(userName, 0);
            roomName = Convert.ToBase64String(guid.ToByteArray())
                .Replace("/", "")
                .Replace("+", "")
                .Substring(0, 8);
            await hubConnection.SendAsync("CreateRoom", roomName);
            await NewOpening();
        }
    }


    public async Task JoinRoom()
    {
        if (hubConnection is not null && userName != "")
        {
            host = false;
            inRoom = true;
            Guid guid = Guid.NewGuid();
            await hubConnection.SendAsync("JoinRoom", roomName, userName);
        }
        else
        {
            host = false;
            inRoom = false;
        }
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }


    private async Task PlayAudio(int seconds)
    {
        if (!hiddenLabel) // if the video is currently showing.
        {
            await NewOpening();
        }
        await hubConnection.SendAsync("PlayAudio", roomName, seconds);
    }

    private async Task ConfirmPlayVideo()
    {
        revealConfirm = !revealConfirm;
        await InvokeAsync(StateHasChanged);
    }

    private async Task PlayVideo()
    {
        revealConfirm = false; // sets the confirmation on early playing back to needing to be confirmed
        await hubConnection.SendAsync("PlayVideo", roomName);
    }


    [JSInvokable]
    public async Task NewOpening()
    {
        if (host && hubConnection is not null)
        {            
            videoIndex = rnd.Next(videoFiles.Count);
            await hubConnection.SendAsync("SendVideo", roomName, videoIndex);
        }
    }


    public async Task PlayerJoinedSendOpening()
    {
        if (host && hubConnection is not null)
        {
            await hubConnection.SendAsync("SendVideo", roomName, videoIndex);
        }
    }


    private async Task ReadFile()
    {
        string? line;
        StreamReader sr = new StreamReader("wwwroot/VideoText.txt");

        //Read the first line of text
        line = sr.ReadLine();
        //Continue to read until you reach end of file
        while (line != null)
        {
            string[] currentLine = line.Split('-');
            if (currentLine.Length == 4)
            {
                VideoFile currVideoInfo = new VideoFile(currentLine[0].Trim(), currentLine[1].Trim(), currentLine[2].Trim(), currentLine[3].Trim());
                videoFiles.Add(currVideoInfo);
            }
            //Read the next line
            line = sr.ReadLine();
        }
        videoFilesAll = videoFiles;
        //close the file
        sr.Close();
    }


    private async Task HideRoomName()
    {
        hiddenName = !hiddenName; //inverts hidden name
        roomNameButtonText = !hiddenName ? "Hide Room Name" : "Show Room Name";
    }
}
