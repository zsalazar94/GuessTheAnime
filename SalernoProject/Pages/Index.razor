@page "/{roomId?}"
@using SalernoProject.Data
@using System.IO;
@inject IConfiguration Config
@inject IJSRuntime js
@inject BlobService BlobService
@inject RoomManager roomManager
@inject IHubContext<QuizHub> hubContext
@inject NavigationManager navigationManager




<PageTitle>Anime Openings Tester</PageTitle>
<style>
    .video {
        max-width: 60vw; 
        max-height: 60vh; 
        width: auto; 
        height: auto; 
        display: none
    }
</style>

<h1>Welcome to Anime Openings Quiz! Multiplayer Players: @counter</h1>

<button @onclick="NewOpening">New Opening</button>
<button @onclick="() => PlayAudio(10000)">10 Seconds</button>
<button @onclick="() => PlayAudio(20000)">20 Seconds</button>
<button @onclick="() => PlayAudio(30000)">30 Seconds</button>
<button @onclick="PlayVideo">Reveal Answer</button>

<br />
<div hidden="@hiddenLabel">
    <h2>@animeName - @openingNumber - @openingName</h2>

    <video id="video" class="video" >
        <source id="videoSource" src="@videoURI" />
    </video>
</div>

@code
{
    [Parameter]
    public string roomId { get; set; } = ""; // Add [Parameter] attribute
    private string animeName = "", openingNumber = "", openingName = "";
    private string videoURI = "";
    private string defaultConnection = "";
    int videoIndex = 0;
    private Random rnd = new Random();
    private VideoFile? currentVideo;
    private List<VideoFile> videoFiles = new List<VideoFile>();
    private BlobService? blobServer;
    private string sasToken;
    bool hiddenLabel = true;
    private Participant participant;
    private int counter = 0;


    protected override async Task OnInitializedAsync()
    {
        blobServer = new BlobService(Config);
        await ReadFile();

        roomId = navigationManager.Uri.Split('/').LastOrDefault() ?? "";


        if (string.IsNullOrEmpty(roomId))
        {
            // If no room ID is provided in the URL, create a new room
            var room = roomManager.CreateRoom();
            roomId = room.RoomId;
            navigationManager.NavigateTo($"/{roomId}");

        }

        sasToken = blobServer.GenerateSasTokenForContainer();
        await JoinRoom();
    }

    private async Task JoinRoom()
    {
        participant = new Participant { ConnectionId = Guid.NewGuid().ToString() };
        roomManager.JoinRoom(roomId, participant);

        // Additional logic for joining the room (e.g., SignalR hub method)
        await hubContext.Clients.Group(roomId).SendAsync("JoinRoom", roomId, participant.ConnectionId);
    }

    public async Task IncreaseCounter()
    {
        counter++;
        StateHasChanged();
    }

    private async Task LeaveRoom()
    {
        roomManager.LeaveRoom(roomId, participant.ConnectionId);

        // Additional logic for leaving the room (e.g., SignalR hub method)
        await hubContext.Clients.Group(roomId).SendAsync("LeaveRoom", participant.ConnectionId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await NewOpening();
        }
    }

    private async Task PlayAudioHelper(int seconds)
    {
        await hubContext.Clients.Group(roomId).SendAsync("PlayAudio", roomId, seconds);
    }

    private async Task PlayAudio(int seconds)
    {
        if (!hiddenLabel) // if the video is currently showing.
        {
            await NewOpening();
        }
        await js.InvokeVoidAsync("hideVideoAndPlay", "video", seconds);
    }

    private async Task PlayVideo()
    {
        animeName = currentVideo.animeName;
        openingNumber = currentVideo.openingNumber;
        openingName = currentVideo.openingName;
        hiddenLabel = false;
        await js.InvokeVoidAsync("showVideoAndPlay", "video", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task NewOpening()
    {
        await js.InvokeVoidAsync("pauseVideo", "video");
        animeName = "";
        openingNumber = "";
        openingName = "";
        videoIndex = rnd.Next(videoFiles.Count);
        currentVideo = videoFiles[videoIndex];
        videoURI = blobServer.GetBlobSasUri(currentVideo.filePath, sasToken);
        hiddenLabel = true;
        
        StateHasChanged();
    }
    private async Task ReadFile()
    {
        string? line;
        StreamReader sr = new StreamReader("wwwroot/VideoText.txt");

        //Read the first line of text
        line = sr.ReadLine();
        //Continue to read until you reach end of file
        while (line != null)
        {
            string[] currentLine = line.Split('-');
            if (currentLine.Length == 4)
            {
                VideoFile currVideoInfo = new VideoFile(currentLine[0].Trim(), currentLine[1].Trim(), currentLine[2].Trim(), currentLine[3].Trim());
                videoFiles.Add(currVideoInfo);
            }
            //Read the next line
            line = sr.ReadLine();
        }
        //close the file
        sr.Close();
    }
}


